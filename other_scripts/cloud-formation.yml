AWSTemplateFormatVersion: '2010-09-09'
Description: Smart Photo Album Application Infrastructure

Resources:
  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "hw3-b2photos"

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "hw3-b2frontend"

  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      ElasticsearchVersion: "7.10"  # Updated version
      DomainName: "photos"
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: "gp2"
      ElasticsearchClusterConfig:
        InstanceType: "t2.small.elasticsearch"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['logs:*', 'es:*', 's3:*']
                Resource: '*'  # Consider specifying more granular permissions

  IndexPhotosFunction11:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LF1"
      Runtime: "python3.11"
      Handler: "index.handler"
      Code:
        S3Bucket: "lambda-code-bucket-hw3"
        S3Key: "lambda_function_1.zip"
      Role: !GetAtt LambdaExecutionRole.Arn

  SearchPhotosFunction11:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LF2"
      Runtime: "python3.11"
      Handler: "search.handler"
      Code:
        S3Bucket: "lambda-code-bucket-hw3"
        S3Key: "lambda_function_2.zip"
      Role: !GetAtt LambdaExecutionRole.Arn

  AssignmentPhotoAPII:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "AssignmentPhotoAPII"
      Description: "API for photo album application"

  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ParentId: !GetAtt AssignmentPhotoAPII.RootResourceId
      PathPart: search

  SearchGETMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ResourceId: !Ref SearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IndexPhotosFunction11.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  SearchOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ResourceId: !Ref SearchResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchPhotosFunction11.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

Outputs:
  FrontendBucketName:
    Value: !Ref FrontendBucket
  PhotoBucketName:
    Value: !Ref PhotoBucket
  ElasticsearchDomainEndpoint:
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint
  LF1Arn:
    Value: !GetAtt IndexPhotosFunction11.Arn
  LF2Arn:
    Value: !GetAtt SearchPhotosFunction11.Arn
  AssignmentPhotoAPIUrl:
    Value: !Sub "https://${AssignmentPhotoAPII}.execute-api.${AWS::Region}.amazonaws.com/Prod"
